evaluationDependsOn(':version')

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

apply plugin: 'forge'
apply plugin: 'maven'

group = "com.scottkillen.mod"
archivesBaseName = "AncientTrees"

minecraft {
    version = project.version_forge + "-" + project.version_mc
    runDir = "run"

    replace '${mod_version}', project.version
}

repositories {
    mavenLocal()
    maven { url = 'http://maven.scottkillen.com/' }
    // maven { url = 'http://coloredlightscore.us.to/maven/chisel-2-dev/' }
    maven { url = 'http://maven.ic2.player.to/' }
}

dependencies {
    // compile "com.cricketcraft.chisel:Chisel2:${project.ext.version_chisel}:api"
    compile files('libs/Chisel2-2.4.0.38-api.jar')
    compile "net.sengir.forestry:forestry_${project.version_mc}:${project.ext.version_forestry}:dev"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "version_mc", project.minecraft.version
    inputs.property "version_forge", project.ext.version_forge
    inputs.property "version_chisel", project.ext.version_chisel
    inputs.property "version_forestry", project.ext.version_forestry

    // replace stuff in the files we want.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version,
                'forge_version': project.ext.version_forge,
                'chisel_version': project.ext.version_chisel, 'sd_version': project.ext.version_storagedrawers
    }

    // copy everything else, that we didn't do before
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/compat/chisel/*.java'
        exclude '**/compat/forestry/*.java'
        exclude '**/*.info'
        exclude '**/version.properties'
    }
}

jar {
    includeEmptyDirs = false
}

task sourcesJar(type: Jar, dependsOn: classes) {
    from(sourceSets.main.output) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version,
                'forge_version': project.ext.version_forge,
                'chisel_version': project.ext.version_chisel, 'sd_version': project.ext.version_storagedrawers
    }

    from(sourceSets.main.allSource) {
        include '**/TheMod.java'

        expand 'mod_version': project.version
    }

    from(sourceSets.main.allSource) {
        exclude '**/compat/chisel/*.java'
        exclude '**/compat/forestry/*.java'
        exclude '**/*.info'
        exclude '**/version.properties'
        exclude '**/TheMod.java'
    }

    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output) {
        include '**/*.info'
        include '**/version.properties'

        expand 'mod_version': project.version, 'minecraft_version': project.minecraft.version,
                'forge_version': project.ext.version_forge,
                'chisel_version': project.ext.version_chisel, 'sd_version': project.ext.version_storagedrawers
    }

    from(sourceSets.main.output) {
        exclude '**/*.info'
        exclude '**/version.properties'
    }

    classifier = 'deobf'
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

uploadArchives {
    repositories.mavenDeployer {
        repository (url:"file://" + projectDir + "/build/maven")
    }
}
